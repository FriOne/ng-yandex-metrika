[1mdiff --git a/integration/src/app/app.module.ts b/integration/src/app/app.module.ts[m
[1mindex db592f0..237a765 100644[m
[1m--- a/integration/src/app/app.module.ts[m
[1m+++ b/integration/src/app/app.module.ts[m
[36m@@ -1,12 +1,16 @@[m
 import { NgModule }      from '@angular/core';[m
 import { BrowserModule } from '@angular/platform-browser';[m
[32m+[m
 import { MetrikaModule } from 'ng-yandex-metrika';[m
 [m
 import { AppComponent }  from './app.component';[m
 [m
 @NgModule({[m
[31m-  imports:      [BrowserModule, MetrikaModule],[m
[32m+[m[32m  imports:      [[m
[32m+[m[32m    BrowserModule,[m
[32m+[m[32m    MetrikaModule.forRoot({id: '45631461'}),[m
[32m+[m[32m  ],[m
   declarations: [AppComponent],[m
   bootstrap:    [AppComponent][m
 })[m
[31m-export class AppModule { }[m
[32m+[m[32mexport class AppModule {}[m
[1mdiff --git a/package.json b/package.json[m
[1mindex 4e37714..1f44e5d 100644[m
[1m--- a/package.json[m
[1m+++ b/package.json[m
[36m@@ -40,12 +40,12 @@[m
     "@angular/core": ">=4.0.0 <5.0.0 || >=4.0.0-beta <5.0.0"[m
   },[m
   "devDependencies": {[m
[31m-    "@angular/common": "~4.1.3",[m
[31m-    "@angular/compiler": "~4.1.3",[m
[31m-    "@angular/compiler-cli": "~4.1.3",[m
[31m-    "@angular/core": "~4.1.3",[m
[31m-    "@angular/platform-browser": "~4.1.3",[m
[31m-    "@angular/platform-browser-dynamic": "~4.1.3",[m
[32m+[m[32m    "@angular/common": "~4.3.4",[m
[32m+[m[32m    "@angular/compiler": "~4.3.4",[m
[32m+[m[32m    "@angular/compiler-cli": "~4.3.4",[m
[32m+[m[32m    "@angular/core": "~4.3.4",[m
[32m+[m[32m    "@angular/platform-browser": "~4.3.4",[m
[32m+[m[32m    "@angular/platform-browser-dynamic": "~4.3.4",[m
     "@types/jasmine": "2.5.36",[m
     "@types/node": "^6.0.46",[m
     "camelcase": "^4.0.0",[m
[1mdiff --git a/src/demo/app/app.component.ts b/src/demo/app/app.component.ts[m
[1mindex ec843f1..afa21e9 100644[m
[1m--- a/src/demo/app/app.component.ts[m
[1m+++ b/src/demo/app/app.component.ts[m
[36m@@ -8,6 +8,6 @@[m [mimport { Metrika } from 'ng-yandex-metrika';[m
 export class AppComponent {[m
 [m
   constructor(private metrika: Metrika) {[m
[31m-    this.metrika.fireEvent('test');[m
[32m+[m[32m    setTimeout(() => this.metrika.fireEvent('test'), 2000);[m
   }[m
 }[m
[1mdiff --git a/src/demo/app/app.module.ts b/src/demo/app/app.module.ts[m
[1mindex cee9b39..237a765 100644[m
[1m--- a/src/demo/app/app.module.ts[m
[1m+++ b/src/demo/app/app.module.ts[m
[36m@@ -1,11 +1,15 @@[m
 import { NgModule }      from '@angular/core';[m
 import { BrowserModule } from '@angular/platform-browser';[m
[32m+[m
 import { MetrikaModule } from 'ng-yandex-metrika';[m
 [m
 import { AppComponent }  from './app.component';[m
 [m
 @NgModule({[m
[31m-  imports:      [BrowserModule, MetrikaModule],[m
[32m+[m[32m  imports:      [[m
[32m+[m[32m    BrowserModule,[m
[32m+[m[32m    MetrikaModule.forRoot({id: '45631461'}),[m
[32m+[m[32m  ],[m
   declarations: [AppComponent],[m
   bootstrap:    [AppComponent][m
 })[m
[1mdiff --git a/src/demo/typings.d.ts b/src/demo/typings.d.ts[m
[1mindex e69de29..b889c12 100644[m
[1m--- a/src/demo/typings.d.ts[m
[1m+++ b/src/demo/typings.d.ts[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32mdeclare var Ya: any;[m
[1mdiff --git a/src/lib/index.ts b/src/lib/index.ts[m
[1mindex 60e1478..960d5ca 100644[m
[1m--- a/src/lib/index.ts[m
[1m+++ b/src/lib/index.ts[m
[36m@@ -1,2 +1,3 @@[m
[31m-export { Metrika } from './src/service/metrika.service';[m
[32m+[m[32mexport { YandexCounterConfig, CounterConfig, DEFAULT_COUNTER_ID } from './src/service/metrika.config';[m
[32m+[m[32mexport { Metrika, CallbackOptions, CommonOptions, HitOptions } from './src/service/metrika.service';[m
 export { MetrikaModule } from './src/module';[m
[1mdiff --git a/src/lib/src/module.ts b/src/lib/src/module.ts[m
[1mindex c59b584..fbc742b 100644[m
[1m--- a/src/lib/src/module.ts[m
[1m+++ b/src/lib/src/module.ts[m
[36m@@ -1,128 +1,119 @@[m
 import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';[m
 [m
 import { Metrika } from './service/metrika.service';[m
[31m-import { CounterConfig, DEFAULT_COUNTER_ID, YandexCounterConfig } from './service/metrika.config';[m
[32m+[m[32mimport { CounterConfig, DEFAULT_COUNTER_ID, YANDEX_COUNTERS_CONFIGS, YandexCounterConfig } from './service/metrika.config';[m
 [m
 @NgModule()[m
 export class MetrikaModule {[m
 [m
[31m-  static forRoot([m
[31m-    configs: CounterConfig | CounterConfig[],[m
[31m-    defaultCounterId?: number | string[m
[31m-  ): ModuleWithProviders {[m
[31m-[m
[31m-    if (!(configs instanceof Array)) {[m
[31m-      configs = [configs as CounterConfig];[m
[31m-    }[m
[31m-[m
[31m-    const {defaultId, counterConfigs} = MetrikaModule.configurateMetrika([m
[31m-      configs as CounterConfig[],[m
[31m-      defaultCounterId[m
[31m-    );[m
[31m-    const castedConfigProviders = counterConfigs.map((config: YandexCounterConfig) => ({[m
[31m-      provide: YandexCounterConfig,[m
[31m-      useValue: config,[m
[31m-      multi: true,[m
[31m-    }));[m
[31m-[m
[32m+[m[32m  static forRoot(configs: CounterConfig | CounterConfig[], defaultCounterId?: number | string): ModuleWithProviders {[m
     return {[m
       ngModule: MetrikaModule,[m
       providers: [[m
         {[m
           provide: DEFAULT_COUNTER_ID,[m
[31m-          useValue: defaultId,[m
[32m+[m[32m          useFactory: () => defaultCounterIdFactory(configs, defaultCounterId),[m
[32m+[m[32m        },[m
[32m+[m[32m        {[m
[32m+[m[32m          provide: YANDEX_COUNTERS_CONFIGS,[m
[32m+[m[32m          useFactory: () => countersFactory(configs),[m
         },[m
[31m-        ...castedConfigProviders,[m
         {[m
           provide: APP_INITIALIZER,[m
[31m-          useFactory: (configs: YandexCounterConfig[]) => function() {[m
[31m-            return MetrikaModule.insertMetrika(configs);[m
[31m-          },[m
[31m-          deps: [YandexCounterConfig],[m
[32m+[m[32m          useFactory: (configs: YandexCounterConfig[]) => function() { return insertMetrika(configs)},[m
[32m+[m[32m          deps: [YANDEX_COUNTERS_CONFIGS],[m
           multi: true,[m
         },[m
         {[m
           provide: Metrika,[m
           useClass: Metrika,[m
[31m-          deps: [DEFAULT_COUNTER_ID, YandexCounterConfig],[m
[32m+[m[32m          deps: [DEFAULT_COUNTER_ID, YANDEX_COUNTERS_CONFIGS],[m
         }[m
       ],[m
     };[m
   }[m
[32m+[m[32m}[m
 [m
[31m-  static configurateMetrika([m
[31m-    configs: CounterConfig[],[m
[31m-    defaultCounter?: number | string[m
[31m-  ): {[m
[31m-    defaultId:  number | string,[m
[31m-    counterConfigs: YandexCounterConfig[][m
[31m-  } {[m
[31m-    const counterConfigs: YandexCounterConfig[] = [];[m
[31m-    let defaultId: number | string;[m
[32m+[m[32mexport function defaultCounterIdFactory([m
[32m+[m[32m  counterConfigs: CounterConfig | CounterConfig[],[m
[32m+[m[32m  defaultCounter?: number | string[m
[32m+[m[32m) {[m
[32m+[m[32m  let configs: CounterConfig[];[m
[32m+[m[32m  if (counterConfigs instanceof Array) {[m
[32m+[m[32m    configs = counterConfigs;[m
[32m+[m[32m  } else {[m
[32m+[m[32m    configs = [counterConfigs as CounterConfig];[m
[32m+[m[32m  }[m
[32m+[m[32m  let defaultId: number | string;[m
 [m
[31m-    if (!defaultCounter) {[m
[31m-      defaultId = configs[0].id;[m
[31m-    }[m
[31m-    else if (typeof defaultCounter === 'number' && defaultCounter < configs.length) {[m
[31m-      defaultId = configs[defaultCounter].id;[m
[31m-    }[m
[31m-    else {[m
[31m-      defaultId = defaultCounter;[m
[31m-    }[m
[32m+[m[32m  if (!defaultCounter) {[m
[32m+[m[32m    defaultId = configs[0].id;[m
[32m+[m[32m  }[m
[32m+[m[32m  else if (typeof defaultCounter === 'number' && defaultCounter < configs.length) {[m
[32m+[m[32m    defaultId = configs[defaultCounter].id;[m
[32m+[m[32m  }[m
[32m+[m[32m  else {[m
[32m+[m[32m    defaultId = defaultCounter;[m
[32m+[m[32m  }[m
 [m
[31m-    if (!defaultId) {[m
[31m-      console.warn('You provided wrong counter id as a default:', defaultCounter);[m
[31m-      return;[m
[31m-    }[m
[32m+[m[32m  if (!defaultId) {[m
[32m+[m[32m    console.warn('You provided wrong counter id as a default:', defaultCounter);[m
[32m+[m[32m    return;[m
[32m+[m[32m  }[m
 [m
[31m-    let defaultCounterExists = false;[m
[31m-    let config;[m
[31m-    for (let i = 0; i < configs.length; i++) {[m
[31m-      config = configs[i];[m
[31m-      if (!config.id) {[m
[31m-        console.warn('You should provide counter id to use Yandex metrika counter', config);[m
[31m-        continue;[m
[31m-      }[m
[31m-      if (config.id === defaultId) {[m
[31m-        defaultCounterExists = true;[m
[31m-      }[m
[31m-      counterConfigs.push(Object.assign(new YandexCounterConfig(), config));[m
[32m+[m[32m  let defaultCounterExists = false;[m
[32m+[m[32m  let config;[m
[32m+[m[32m  for (let i = 0; i < configs.length; i++) {[m
[32m+[m[32m    config = configs[i];[m
[32m+[m[32m    if (!config.id) {[m
[32m+[m[32m      console.warn('You should provide counter id to use Yandex metrika counter', config);[m
[32m+[m[32m      continue;[m
     }[m
[31m-[m
[31m-    if (!defaultCounterExists) {[m
[31m-      console.warn('You provided wrong counter id as a default:', defaultCounter);[m
[32m+[m[32m    if (config.id === defaultId) {[m
[32m+[m[32m      defaultCounterExists = true;[m
     }[m
[31m-    return {[m
[31m-      counterConfigs,[m
[31m-      defaultId,[m
[31m-    };[m
   }[m
 [m
[31m-  static insertMetrika(counterConfigs: YandexCounterConfig[]) {[m
[31m-    let name = 'yandex_metrika_callbacks';[m
[31m-    window[name] = window[name] || [];[m
[31m-    window[name].push(() => {[m
[31m-      try {[m
[31m-        counterConfigs.map((config: YandexCounterConfig) => MetrikaModule.createCounter(config));[m
[31m-      } catch(e) {}[m
[31m-    });[m
[31m-[m
[31m-    let n = document.getElementsByTagName('script')[0],[m
[31m-      s = document.createElement('script'),[m
[31m-      f = () => { n.parentNode.insertBefore(s, n); };[m
[31m-    s.type = 'text/javascript';[m
[31m-    s.async = true;[m
[31m-    s.src = 'https://mc.yandex.ru/metrika/watch.js';[m
[31m-[m
[31m-    f();[m
[31m-    return name;[m
[32m+[m[32m  if (!defaultCounterExists) {[m
[32m+[m[32m    console.warn('You provided wrong counter id as a default:', defaultCounter);[m
   }[m
[32m+[m[32m  return defaultId;[m
[32m+[m[32m}[m
 [m
[31m-  static createCounter(config: YandexCounterConfig) {[m
[31m-    window[MetrikaModule.getCounterNameById(config.id)] = new Ya.Metrika(config);[m
[32m+[m[32mexport function countersFactory(configs: CounterConfig | CounterConfig[]) {[m
[32m+[m[32m  let counterConfigs: CounterConfig[];[m
[32m+[m[32m  if (configs instanceof Array) {[m
[32m+[m[32m    counterConfigs = configs;[m
[32m+[m[32m  } else {[m
[32m+[m[32m    counterConfigs = [configs as CounterConfig];[m
   }[m
[32m+[m[32m  return counterConfigs.map((config: CounterConfig) => Object.assign(new YandexCounterConfig(), config));[m
[32m+[m[32m}[m
 [m
[31m-  static getCounterNameById(id: string | number) {[m
[31m-    return `yaCounter${id}`;[m
[31m-  }[m
[32m+[m[32mexport function insertMetrika(counterConfigs: YandexCounterConfig[]) {[m
[32m+[m[32m  let name = 'yandex_metrika_callbacks';[m
[32m+[m[32m  window[name] = window[name] || [];[m
[32m+[m[32m  window[name].push(() => {[m
[32m+[m[32m    try {[m
[32m+[m[32m      counterConfigs.map((config: YandexCounterConfig) => createCounter(config));[m
[32m+[m[32m    } catch(e) {}[m
[32m+[m[32m  });[m
[32m+[m
[32m+[m[32m  let n = document.getElementsByTagName('script')[0],[m
[32m+[m[32m    s = document.createElement('script'),[m
[32m+[m[32m    f = () => { n.parentNode.insertBefore(s, n); };[m
[32m+[m[32m  s.type = 'text/javascript';[m
[32m+[m[32m  s.async = true;[m
[32m+[m[32m  s.src = 'https://mc.yandex.ru/metrika/watch.js';[m
[32m+[m
[32m+[m[32m  f();[m
[32m+[m[32m  return name;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mexport function createCounter(config: YandexCounterConfig) {[m
[32m+[m[32m  window[getCounterNameById(config.id)] = new Ya.Metrika(config);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mexport function getCounterNameById(id: string | number) {[m
[32m+[m[32m  return `yaCounter${id}`;[m
 }[m
[1mdiff --git a/src/lib/src/service/metrika.config.ts b/src/lib/src/service/metrika.config.ts[m
[1mindex 78a5aa6..064203e 100644[m
[1m--- a/src/lib/src/service/metrika.config.ts[m
[1m+++ b/src/lib/src/service/metrika.config.ts[m
[36m@@ -1,6 +1,7 @@[m
[31m-import { Injectable, InjectionToken } from '@angular/core';[m
[32m+[m[32mimport { InjectionToken } from '@angular/core';[m
 [m
[31m-export const DEFAULT_COUNTER_ID = new InjectionToken< number | string>('DEFAULT_COUNTER_ID');[m
[32m+[m[32mexport const DEFAULT_COUNTER_ID = new InjectionToken<number | string>('DEFAULT_COUNTER_ID');[m
[32m+[m[32mexport const YANDEX_COUNTERS_CONFIGS = new InjectionToken<YandexCounterConfig[]>('YANDEX_COUNTERS_CONFIGS');[m
 [m
 export interface CounterConfig {[m
   id: string | number;[m
[36m@@ -12,7 +13,6 @@[m [mexport interface CounterConfig {[m
   ut?: string;[m
 }[m
 [m
[31m-@Injectable()[m
 export class YandexCounterConfig  implements CounterConfig {[m
   id: string;[m
   clickmap = true;[m
[1mdiff --git a/src/lib/src/service/metrika.service.ts b/src/lib/src/service/metrika.service.ts[m
[1mindex c6c663c..eb0c2fc 100644[m
[1m--- a/src/lib/src/service/metrika.service.ts[m
[1m+++ b/src/lib/src/service/metrika.service.ts[m
[36m@@ -128,10 +128,12 @@[m [mexport class Metrika {[m
   async fireEvent(type: string, options: CommonOptions = {}, counterPosition?: number): Promise<any> {[m
     try {[m
       const counter = await this.counterIsLoaded(counterPosition);[m
[32m+[m[32m      console.log('counter', counter);[m
       const promise = this.getCallbackPromise(options, options);[m
       counter.reachGoal(type, options.params, options.callback, options.ctx);[m
       return promise;[m
     } catch (error) {[m
[32m+[m[32m      console.error('error', error);[m
       console.warn(`'Event with type [${type}] can\'t be fired because counter is still loading'`)[m
     }[m
   }[m
[36m@@ -160,9 +162,10 @@[m [mexport class Metrika {[m
   private counterIsLoaded(counterPosition?: number): Promise<any> {[m
     let counter = this.getCounterByPosition(counterPosition);[m
     if (counter && counter.reachGoal) {[m
[31m-      Promise.resolve(counter);[m
[32m+[m[32m      return Promise.resolve(counter);[m
[32m+[m[32m    } else {[m
[32m+[m[32m      return Promise.reject(counter);[m
     }[m
[31m-    return Promise.reject(counter);[m
   }[m
 [m
   private getCounterByPosition(counterPosition?: number) {[m
[1mdiff --git a/src/lib/typings.d.ts b/src/lib/typings.d.ts[m
[1mindex d3af4c4..b889c12 100644[m
[1m--- a/src/lib/typings.d.ts[m
[1m+++ b/src/lib/typings.d.ts[m
[36m@@ -1,2 +1 @@[m
[31m-// You can add project typings here.[m
 declare var Ya: any;[m
